version: 2.1
orbs:
  slack: circleci/slack@4.12.0
  aws-cli: circleci/aws-cli@3.1.4
  ansible_upload: orbss/ansible_upload@0.2.8

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here
      circleci_id:
        type: string
        default: "${CIRCLE_WORKFLOW_ID:0:7}"
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.circleci_id >>
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.circleci_id >>
  remove-bucket-contents:
    description: Remove contents of bucket
    parameters:
      bucket_name:
        type: string
        default: "${CIRCLE_WORKFLOW_ID:0:7}"
    steps:
      - run:
          name: Remove contents of bucket
          when: on_fail
          command: |
             # your code here
             aws s3 rm s3://udapeople-<< parameters.bucket_name >> --recursive
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here
      storage_id:
        type: string
        default: 'hi'
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl -k "https://kvdb.io/4kiawDK2euCm4Mbq4JHknU/migration_${CIRCLE_WORKFLOW_ID:0:7}")
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      # - slack/notify:
      #     branch_pattern: master
      #     channel: C04CPS646NP
      #     event: pass
      #     template: success_tagged_deploy_1
      - slack/notify:
          branch_pattern: master
          channel: C04CPS646NP
          event: fail
          template: basic_fail_1

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             # Your code here
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      # - slack/notify:
      #     branch_pattern: master
      #     channel: C04CPS646NP
      #     event: pass
      #     template: success_tagged_deploy_1
      - slack/notify:
          branch_pattern: master
          channel: C04CPS646NP
          event: fail
          template: basic_fail_1

  test-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: Test frontend
          command: |
             cd frontend
             npm install
             npm run test
      - slack/notify:
          branch_pattern: master
          channel: C04CPS646NP
          event: fail
          template: basic_fail_1
                
  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: Test backend
          command: |
             cd backend
             npm install
             npm run test
      - slack/notify:
          branch_pattern: master
          channel: C04CPS646NP
          event: fail
          template: basic_fail_1
            
  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: Scan frontend
          command: |
             cd frontend
             npm install
             npm audit fix --audit-level=critical --force
             npm audit --audit-level=critical
      - slack/notify:
          branch_pattern: master
          channel: C04CPS646NP
          event: fail
          template: basic_fail_1

  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: Scan backend
          command: |
             cd backend
             npm install
             npm audit fix --audit-level=critical --force
             npm audit fix --force
             npm update path-parse --depth 3
             npm audit --audit-level=critical
      - save_cache:
          paths: [backend/node_modules]
          key: scan-backend
      - slack/notify:
          branch_pattern: master
          channel: C04CPS646NP
          event: fail
          template: basic_fail_1

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query "Reservations[*].Instances[*].PublicDnsName" \
            --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # - slack/notify:
      #     branch_pattern: master
      #     channel: C04CPS646NP
      #     event: pass
      #     template: success_tagged_deploy_1
      - slack/notify:
          branch_pattern: master
          channel: C04CPS646NP
          event: fail
          template: basic_fail_1
      # Here's where you will add some code to rollback on failure  
      - destroy-environment    

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # Your code here
            yum install -y gcc libffi-devel python3 epel-release && \
            yum install -y python3-pip && \
            yum install -y wget && \
            yum clean all && \
            yum update -y && \
            yum install -y tar gzip curl unzip openssh-server openssh-clients && \
            python3 -m pip install ansible
      # Add ssh keys with fingerprint
      - add_ssh_keys:
           fingerprints: ["6c:f8:3d:35:4b:aa:19:6a:94:22:b8:52:e1:75:9d:23"]
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Configure server
          command: |
            # Your code here
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      # - slack/notify:
      #     branch_pattern: master
      #     channel: C04CPS646NP
      #     event: fail
      #     template: basic_fail_1
      # Here's where you will add some code to rollback on failure  
      - destroy-environment 


  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - aws-cli/setup
      - restore_cache:
          keys: [scan-backend]      
      - run:
          name: Run migrations
          command: |
            cd backend
            # Run and save the migration output
            # npm install --no-audit --no-fund
            npm run migrations > migrations_dump.txt
            # no_output_timeout: 5m
      - run:
          name: Send migration results to kvdb
          command: |
            # Your code here
            ls ~/
            if [[ 'has been executed successfully.' =~ $(grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt | uniq) ]]
            then
                # If you are using kvdb.io, generate the bucket ID "9GE4jRtKznmVKRfvdBABBe" in your local terminal first
                curl -k https://kvdb.io/4kiawDK2euCm4Mbq4JHknU/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      # Here's where you will add some code to rollback on failure
      - revert-migrations
      # - destroy-environment 

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - aws-cli/setup
      - run:
          name: Install dependencies
          command: |
            # your code here
            sudo apt update && \
            sudo apt install -y tar gzip curl
      - run:
          name: Install npm
          command: |
             # your code here
      - attach_workspace:
          at: ~/
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query "Reservations[*].Instances[*].PublicDnsName" \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure   
      - remove-bucket-contents
      - destroy-environment
                    
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.16
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
           fingerprints: ["6c:f8:3d:35:4b:aa:19:6a:94:22:b8:52:e1:75:9d:23"]
      # attach workspace
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache tar gzip nodejs npm aws-cli ansible
      - restore_cache:
          keys: [backend-build]
      # attach workspace
      - attach_workspace:
          at: ~/
      - run: 
          name: Deploy backend
          command: |
             cd backend
             npm i
             npm run build 
             cd ..
             # Zip the directory
             tar -C backend -czvf artifact.tar.gz .
             mkdir -p ~/project/.circleci/ansible/roles/deploy/files/
             cp -r artifact.tar.gz ~/project/.circleci/ansible/roles/deploy/files/
             cd .circleci/ansible
             echo "Contents  of the inventory.txt file is -------"
             cat inventory.txt
             ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure
      - remove-bucket-contents
      - destroy-environment

#   smoke-test:
#     docker:
#       # Lightweight Docker image 
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#       - run:
#           name: Backend smoke test.
#           command: |
#             # your code here
#       - run:
#           name: Frontend smoke test.
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      - build-frontend:
          context: slack-secrets
      - build-backend:
          context: slack-secrets
      - test-frontend:
          context: slack-secrets
          requires: [build-frontend]
      - test-backend:
          context: slack-secrets
          requires: [build-backend]
      - scan-backend:
          context: slack-secrets
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]

# VS Code Extension Version: 1.5.0